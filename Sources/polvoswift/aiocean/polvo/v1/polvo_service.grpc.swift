//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: aiocean/polvo/v1/polvo_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Aiocean_Polvo_V1_PolvoServiceClient`, then call methods of this protocol to make API calls.
public protocol Aiocean_Polvo_V1_PolvoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Aiocean_Polvo_V1_PolvoServiceClientInterceptorFactoryProtocol? { get }

  func createPackage(
    _ request: Aiocean_Polvo_V1_CreatePackageRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_CreatePackageResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_CreatePackageRequest, Aiocean_Polvo_V1_CreatePackageResponse>

  func updatePackage(
    _ request: Aiocean_Polvo_V1_UpdatePackageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Aiocean_Polvo_V1_UpdatePackageRequest, Aiocean_Polvo_V1_UpdatePackageResponse>

  func getPackage(
    _ request: Aiocean_Polvo_V1_GetPackageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Aiocean_Polvo_V1_GetPackageRequest, Aiocean_Polvo_V1_GetPackageResponse>

  func getManifestUrl(
    _ request: Aiocean_Polvo_V1_GetManifestUrlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Aiocean_Polvo_V1_GetManifestUrlRequest, Aiocean_Polvo_V1_GetManifestUrlResponse>

  func listPackages(
    _ request: Aiocean_Polvo_V1_ListPackagesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_ListPackagesResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_ListPackagesRequest, Aiocean_Polvo_V1_ListPackagesResponse>

  func deletePackage(
    _ request: Aiocean_Polvo_V1_DeletePackageRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_DeletePackageResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_DeletePackageRequest, Aiocean_Polvo_V1_DeletePackageResponse>

  func listVersions(
    _ request: Aiocean_Polvo_V1_ListVersionsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_ListVersionsResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_ListVersionsRequest, Aiocean_Polvo_V1_ListVersionsResponse>

  func createVersion(
    _ request: Aiocean_Polvo_V1_CreateVersionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_CreateVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_CreateVersionRequest, Aiocean_Polvo_V1_CreateVersionResponse>

  func updateVersion(
    _ request: Aiocean_Polvo_V1_UpdateVersionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_UpdateVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_UpdateVersionRequest, Aiocean_Polvo_V1_UpdateVersionResponse>

  func deleteVersion(
    _ request: Aiocean_Polvo_V1_DeleteVersionRequest,
    callOptions: CallOptions?,
    handler: @escaping (Aiocean_Polvo_V1_DeleteVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_DeleteVersionRequest, Aiocean_Polvo_V1_DeleteVersionResponse>

  func getVersion(
    _ request: Aiocean_Polvo_V1_GetVersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Aiocean_Polvo_V1_GetVersionRequest, Aiocean_Polvo_V1_GetVersionResponse>
}

extension Aiocean_Polvo_V1_PolvoServiceClientProtocol {
  public var serviceName: String {
    return "aiocean.polvo.v1.PolvoService"
  }

  /// Server streaming call to CreatePackage
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePackage.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func createPackage(
    _ request: Aiocean_Polvo_V1_CreatePackageRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_CreatePackageResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_CreatePackageRequest, Aiocean_Polvo_V1_CreatePackageResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/CreatePackage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePackageInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to UpdatePackage
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePackage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updatePackage(
    _ request: Aiocean_Polvo_V1_UpdatePackageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Aiocean_Polvo_V1_UpdatePackageRequest, Aiocean_Polvo_V1_UpdatePackageResponse> {
    return self.makeUnaryCall(
      path: "/aiocean.polvo.v1.PolvoService/UpdatePackage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePackageInterceptors() ?? []
    )
  }

  /// Unary call to GetPackage
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPackage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPackage(
    _ request: Aiocean_Polvo_V1_GetPackageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Aiocean_Polvo_V1_GetPackageRequest, Aiocean_Polvo_V1_GetPackageResponse> {
    return self.makeUnaryCall(
      path: "/aiocean.polvo.v1.PolvoService/GetPackage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPackageInterceptors() ?? []
    )
  }

  /// Unary call to GetManifestUrl
  ///
  /// - Parameters:
  ///   - request: Request to send to GetManifestUrl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getManifestUrl(
    _ request: Aiocean_Polvo_V1_GetManifestUrlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Aiocean_Polvo_V1_GetManifestUrlRequest, Aiocean_Polvo_V1_GetManifestUrlResponse> {
    return self.makeUnaryCall(
      path: "/aiocean.polvo.v1.PolvoService/GetManifestUrl",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetManifestUrlInterceptors() ?? []
    )
  }

  /// Server streaming call to ListPackages
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPackages.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listPackages(
    _ request: Aiocean_Polvo_V1_ListPackagesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_ListPackagesResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_ListPackagesRequest, Aiocean_Polvo_V1_ListPackagesResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/ListPackages",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPackagesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to DeletePackage
  ///
  /// - Parameters:
  ///   - request: Request to send to DeletePackage.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func deletePackage(
    _ request: Aiocean_Polvo_V1_DeletePackageRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_DeletePackageResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_DeletePackageRequest, Aiocean_Polvo_V1_DeletePackageResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/DeletePackage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeletePackageInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to ListVersions
  ///
  /// - Parameters:
  ///   - request: Request to send to ListVersions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listVersions(
    _ request: Aiocean_Polvo_V1_ListVersionsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_ListVersionsResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_ListVersionsRequest, Aiocean_Polvo_V1_ListVersionsResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/ListVersions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListVersionsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to CreateVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateVersion.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func createVersion(
    _ request: Aiocean_Polvo_V1_CreateVersionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_CreateVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_CreateVersionRequest, Aiocean_Polvo_V1_CreateVersionResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/CreateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateVersionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to UpdateVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateVersion.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func updateVersion(
    _ request: Aiocean_Polvo_V1_UpdateVersionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_UpdateVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_UpdateVersionRequest, Aiocean_Polvo_V1_UpdateVersionResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/UpdateVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateVersionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to DeleteVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteVersion.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func deleteVersion(
    _ request: Aiocean_Polvo_V1_DeleteVersionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Aiocean_Polvo_V1_DeleteVersionResponse) -> Void
  ) -> ServerStreamingCall<Aiocean_Polvo_V1_DeleteVersionRequest, Aiocean_Polvo_V1_DeleteVersionResponse> {
    return self.makeServerStreamingCall(
      path: "/aiocean.polvo.v1.PolvoService/DeleteVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteVersionInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersion(
    _ request: Aiocean_Polvo_V1_GetVersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Aiocean_Polvo_V1_GetVersionRequest, Aiocean_Polvo_V1_GetVersionResponse> {
    return self.makeUnaryCall(
      path: "/aiocean.polvo.v1.PolvoService/GetVersion",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVersionInterceptors() ?? []
    )
  }
}

public protocol Aiocean_Polvo_V1_PolvoServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createPackage'.
  func makeCreatePackageInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_CreatePackageRequest, Aiocean_Polvo_V1_CreatePackageResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePackage'.
  func makeUpdatePackageInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_UpdatePackageRequest, Aiocean_Polvo_V1_UpdatePackageResponse>]

  /// - Returns: Interceptors to use when invoking 'getPackage'.
  func makeGetPackageInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_GetPackageRequest, Aiocean_Polvo_V1_GetPackageResponse>]

  /// - Returns: Interceptors to use when invoking 'getManifestUrl'.
  func makeGetManifestUrlInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_GetManifestUrlRequest, Aiocean_Polvo_V1_GetManifestUrlResponse>]

  /// - Returns: Interceptors to use when invoking 'listPackages'.
  func makeListPackagesInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_ListPackagesRequest, Aiocean_Polvo_V1_ListPackagesResponse>]

  /// - Returns: Interceptors to use when invoking 'deletePackage'.
  func makeDeletePackageInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_DeletePackageRequest, Aiocean_Polvo_V1_DeletePackageResponse>]

  /// - Returns: Interceptors to use when invoking 'listVersions'.
  func makeListVersionsInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_ListVersionsRequest, Aiocean_Polvo_V1_ListVersionsResponse>]

  /// - Returns: Interceptors to use when invoking 'createVersion'.
  func makeCreateVersionInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_CreateVersionRequest, Aiocean_Polvo_V1_CreateVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateVersion'.
  func makeUpdateVersionInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_UpdateVersionRequest, Aiocean_Polvo_V1_UpdateVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteVersion'.
  func makeDeleteVersionInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_DeleteVersionRequest, Aiocean_Polvo_V1_DeleteVersionResponse>]

  /// - Returns: Interceptors to use when invoking 'getVersion'.
  func makeGetVersionInterceptors() -> [ClientInterceptor<Aiocean_Polvo_V1_GetVersionRequest, Aiocean_Polvo_V1_GetVersionResponse>]
}

public final class Aiocean_Polvo_V1_PolvoServiceClient: Aiocean_Polvo_V1_PolvoServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Aiocean_Polvo_V1_PolvoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the aiocean.polvo.v1.PolvoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Aiocean_Polvo_V1_PolvoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

